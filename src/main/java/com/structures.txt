Arrays (static / fixed size)
----------------------------------------------

    - Unordered, Indexed collection of data
    - Allocated a single, contiguous block of memory
    - Fixed size lets the program allocate exactly the right amount of memory,
        and it makes it easy to find any elementâ€™s memory address because all elements are the same size
        and placed one after another in memory

     - int[] arr = new int[4]; // Java populates empty arrs with 0's
     - Python only has lists (dynamic arrs, no type restrictions)

     - getting, inserting by index is O(1)
     - iterating over arr is O(n) - linear time



Sorted Arrays - Searching faster, at a price
----------------------------------------------

    - Faster to search than unsorted ones
        - Linear: we can stop searching as soon as we find an entry larger than the target itself
        - Linear: big boost (benefit) if searched value is small, small boost if value is big (we must still go through most of the array)
        - Binary: start in middle, and keep chunking in halves until you find the value

    - Faster search, but slower insert/delete (elements must be re-sorted)


Dynamic (resizable) Arrays
----------------------------------------------

    - Not really a "new" or "separate" data structure
    - DAs are implemented with static arrays
        - we still pay the price of allocating a new array and throwing away the old one every time we need to resize it
        - Key: strategy to grow and shrink underlying static arrays
        - Strategy: Start with X size. When required: double the size, copy over all elements
        - Java ArrayList doesn't shrink, but common shrink strategy waits until array is 75% empty before halving.

    - Cost - insert (and delete) can't be O(1) as they are for static unsorted arrays.





Linked Lists
----------------------------------------------

Not considering traversal:

+-----------------------------+-------------------------+-----------------------------+
|          Scenario           |        ArrayList        |         LinkedList          |
+-----------------------------+-------------------------+-----------------------------+
| Random access               | Fast (O(1))             | Slow (O(n))                 |
| Insertion at end            | Fast (amortized O(1))   | Fast (O(1))                 |
| Insertion in middle         | Slow (O(n))             | Fast (O(1))                 |
| Deletion in middle          | Slow (O(n))             | Fast (O(1))                 |
| Memory usage                | Lower overhead          | Higher overhead             |
| Iteration                   | Fast                    | Fast                        |
| When to use                 | Frequent random access  | Frequent insert/delete      |
|                             | and appending           | in beginning or middle      |
+-----------------------------+-------------------------+-----------------------------+

Considering traversal:

+--------------------------+-------------------------+-------------------------+
| Operation                | ArrayList               | LinkedList              |
+--------------------------+-------------------------+-------------------------+
| Access by index          | O(1)                    | O(n)                    |
| Insert at end            | Amortized O(1)          | O(1)                    |
| Insert at middle         | O(n)                    | O(n)*                   |
| Insert at head           | O(n)                    | O(1)                    |
| Remove from end          | O(1)                    | O(n)                    |
| Remove from middle       | O(n)                    | O(n)*                   |
| Remove from head         | O(n)                    | O(1)                    |
| Memory efficiency        | Better                  | Worse (extra node links)|
| Iteration                | Faster (cache friendly) | Slower                  |
+--------------------------+-------------------------+-------------------------+







TreeSet and TreeMap
----------------------------------------------

    Maintains natural order
    O(log n) for insertion, deletion, search
    MUCH MUCH FASTER than Arrays.sort()'s O(n log n), thus best when DUPLICATES are not allowed

    To iterate backwards (from highest):
        Set - treeSet.descendingIterator();
        Iterator<String> iterator2 = treeSet.descendingIterator();
            while(iterator2.hasNext()) {
                System.out.println(iterator2.next());
            }

        Map - Map.Entry<Integer, Integer> entry : scores.descendingMap().entrySet()

+--------------------------+---------------------------------------+-----------------------------------+
| Data Structure           | When to Use                           | Ordering                          |
+--------------------------+---------------------------------------+-----------------------------------+
| HashMap / HashSet        | Fast lookups, order doesn't matter     | No ordering guaranteed            |
| LinkedHashMap / HashSet  | Maintain insertion order               | Order of insertion matters         |
| TreeMap / TreeSet        | Need sorted keys/values                | Natural order or custom comparator |
+--------------------------+---------------------------------------+-----------------------------------+




Stack
----------------------------------------------

In Java:

    Deque<Integer> stack = new ArrayDeque<>();

    Stands for "Double-Ended Queue", pronounced as "Deck"

    A linear collection that supports element insertion and removal at BOTH ENDS.

    Can replace LinkedList (for Queue, FIFO) and Stack (Stack, LIFO)
    Can add/remove FIRST And LAST elements
    Can also "examine" (look without removing) first/last
